package warp

import (
	"bytes"
	"errors"
	"io"
	"reflect"
	"testing"
)

func TestAuthenticatorDataDecode(t *testing.T) {
	type decodeTest struct {
		Name     string
		Reader   io.Reader
		Expected *AuthenticatorData
		Err      error
	}

	tests := []decodeTest{
		{
			Name:   "bad reader",
			Reader: &badReader{},
			Err:    ErrDecodeAuthenticatorData,
		},
		{
			Name:   "RPID too short",
			Reader: bytes.NewBuffer([]byte{0x00}),
			Err:    ErrDecodeAuthenticatorData,
		},
		{
			Name: "Unable to read flag byte",
			Reader: bytes.NewBuffer([]byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
				0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
				0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
			}),
			Err: ErrDecodeAuthenticatorData,
		},
		{
			Name: "Unable to read sign count",
			Reader: bytes.NewBuffer([]byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
				0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
				0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				0xC5,
				0x00, 0x00, 0x00,
			}),
			Err: ErrDecodeAuthenticatorData,
		},
		{
			Name: "Bad attested credential data",
			Reader: bytes.NewBuffer([]byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
				0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
				0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				0x40,
				0x00, 0x00, 0x00, 0x00,
			}),
			Err: ErrDecodeAuthenticatorData,
		},
		{
			Name: "Bad extension data",
			Reader: bytes.NewBuffer([]byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
				0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
				0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				0x80,
				0x00, 0x00, 0x00, 0x00,
			}),
			Err: ErrDecodeAuthenticatorData,
		},
		{
			Name: "Good no AT or ED",
			Reader: bytes.NewBuffer([]byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
				0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
				0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				0x00,
				0x00, 0x00, 0x00, 0x00,
			}),
			Expected: &AuthenticatorData{
				RPIDHash: [32]byte{
					0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
					0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
					0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
					0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				},
				UP:                     false,
				UV:                     false,
				AT:                     false,
				ED:                     false,
				SignCount:              0,
				AttestedCredentialData: AttestedCredentialData{},
				Extensions:             nil,
			},
		},
		{
			Name: "Good AT",
			Reader: bytes.NewBuffer(append([]byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
				0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
				0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				0x40,
				0x00, 0x00, 0x00, 0x00,
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
				0x00, 0x10,
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
			}, goodP256Raw...)),
			Expected: &AuthenticatorData{
				RPIDHash: [32]byte{
					0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
					0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
					0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
					0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				},
				UP:        false,
				UV:        false,
				AT:        true,
				ED:        false,
				SignCount: 0,
				AttestedCredentialData: AttestedCredentialData{
					AAGUID: [16]byte{
						0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
						0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
					},
					CredentialID: []byte{
						0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
						0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
					},
					CredentialPublicKey: *goodP256COSE,
				},
				Extensions: nil,
			},
		},
		{
			Name: "Bad extension after attested credential data",
			Reader: bytes.NewBuffer(append([]byte{
				0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
				0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
				0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
				0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,
				0xC0,
				0x00, 0x00, 0x00, 0x00,
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
				0x00, 0x10,
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
			}, goodP256Raw...)),
			Err: ErrDecodeAuthenticatorData,
		},
	}

	for _, test := range tests {
		t.Run(test.Name, func(tt *testing.T) {
			ad := &AuthenticatorData{}
			err := ad.Decode(test.Reader)
			if err != nil {
				if errors.Is(err, test.Err) {
					return
				}
				tt.Fatalf("Unexpected error %v", err)
			}
			if test.Err != nil {
				tt.Fatal("Did not get expected error")
			}
			if !reflect.DeepEqual(*ad, *test.Expected) {
				tt.Fatalf("Did not get expected AuthenticatorData. Expected: %#v; actual: %#v", *test.Expected, *ad)
			}
		})
	}
}

func TestAttestedCredentialDataDecode(t *testing.T) {
	type decodeTest struct {
		Name     string
		Reader   io.Reader
		Expected *AttestedCredentialData
		Err      error
	}

	tests := []decodeTest{
		{
			Name:   "Bad reader",
			Reader: &badReader{},
			Err:    ErrDecodeAttestedCredentialData,
		},
		{
			Name: "AAGUID too short",
			Reader: bytes.NewBuffer([]byte{
				0x0,
			}),
			Err: ErrDecodeAttestedCredentialData,
		},
		{
			Name: "Unable to read credential ID length",
			Reader: bytes.NewBuffer([]byte{
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
			}),
			Err: ErrDecodeAttestedCredentialData,
		},
		{
			Name: "Unable to read credential ID",
			Reader: bytes.NewBuffer([]byte{
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
				0x00, 0x10,
			}),
			Err: ErrDecodeAttestedCredentialData,
		},
		{
			Name: "Unable to read credential public key",
			Reader: bytes.NewBuffer([]byte{
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
				0x00, 0x10,
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
			}),
			Err: ErrDecodeAttestedCredentialData,
		},
		{
			Name: "Good",
			Reader: bytes.NewBuffer(append([]byte{
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
				0x00, 0x10,
				0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
				0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
			}, goodP256Raw...)),
			Expected: &AttestedCredentialData{
				AAGUID: [16]byte{
					0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
					0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
				},
				CredentialID: []byte{
					0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
					0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
				},
				CredentialPublicKey: *goodP256COSE,
			},
		},
	}

	for _, test := range tests {
		t.Run(test.Name, func(tt *testing.T) {
			ad := &AttestedCredentialData{}
			err := ad.Decode(test.Reader)
			if err != nil {
				if errors.Is(err, test.Err) {
					return
				}
				tt.Fatalf("Unexpected error %v", err)
			}
			if test.Err != nil {
				tt.Fatal("Did not get expected error")
			}
			if !reflect.DeepEqual(*ad, *test.Expected) {
				tt.Fatalf("Did not get expected AuthenticatorData. Expected: %#v; actual: %#v", *test.Expected, *ad)
			}
		})
	}
}
